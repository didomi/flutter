//noinspection GrPackage
plugins {
    id("com.android.application")
    id("kotlin-android")
    id("dev.flutter.flutter-gradle-plugin")
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    compileSdkVersion(35)
    namespace = "io.didomi.flutter.sample"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion(35)

        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName

        applicationId = "io.didomi.flutter.sample"
        multiDexEnabled = true
        ndkVersion = "26.3.11579264"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        buildConfig = true
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }
}

flutter {
    source = "../.."
}

dependencies {
    implementation("com.google.code.gson:gson:2.12.1")

    testImplementation("junit:junit:4.12") // Must match flutter dependencies

    // https://developer.android.com/jetpack/androidx/releases/test/#1.2.0
    androidTestImplementation("androidx.test:runner:1.2.0") // Must match flutter dependencies
    androidTestImplementation("androidx.test.espresso:espresso-core:3.2.0") // Must match flutter dependencies
}

/**
 * Gradle task for running all integration tests sequentially (with espresso)
 */
tasks.register("bulk") {
    doLast {
        file("../../integration_test").eachFileMatch(groovy.io.FileType.FILES, ~/^.+\.dart$/, { file ->
            exec {
                commandLine(
                        "../gradlew",
                        "connectedAndroidTest",
                        "-Ptarget=$file"
                )
            }
        })
    }
}
